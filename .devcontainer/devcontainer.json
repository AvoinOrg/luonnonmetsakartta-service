// .devcontainer/devcontainer.json
{
    "name": "luonnonmetsakartta-service",
    // â‘  Re-use your existing compose file (or chain in overrides)
    "dockerComposeFile": [
        "../docker-compose.yml"
    ],
    "service": "app-sandbox",
    "workspaceFolder": "/app",
    "customizations": {
        "vscode": {
            "extensions": [
                "charliermarsh.ruff",
                "docker.docker",
                "esbenp.prettier-vscode",
                "github.copilot",
                "github.copilot-chat",
                "github.vscode-pull-request-github",
                "ms-azuretools.vscode-docker",
                "ms-python.debugpy",
                "ms-python.python",
                "ms-toolsai.jupyter",
                "ms-toolsai.jupyter-keymap",
                "ms-toolsai.jupyter-renderers",
                "ms-toolsai.vscode-jupyter-cell-tags",
                "ms-toolsai.vscode-jupyter-slideshow"
            ],
            "settings": {
                "[python]": {
                    "editor.defaultFormatter": "charliermarsh.ruff",
                },
                "ruff.format": true
            }
        }
    },
    // "initializeCommand": "sudo groupadd -f -g $(stat -c '%g' /var/run/docker.sock) docker && sudo usermod -aG $(stat -c '%g' /var/run/docker.sock) $(id -un)",
    // "postStartCommand": ".devcontainer/configure-env.sh",
    "features": {
        // "ghcr.io/devcontainers/features/docker-outside-of-docker:1": {}
    },
    // "initializeCommand": [
    //   "bash",
    //   "-c",
    //   "SOCK=/var/run/docker.sock; GID=$(stat -c '%g' $SOCK); if ! getent group $GID >/dev/null 2>&1; then groupadd -g $GID host-docker; fi; usermod -aG $GID node"
    // ],
    "runServices": [
        "app-sandbox",
        "postgis-dev",
        "postgis-test"
    ],
    // Mount the **stable** SSH-agent socket
    "mounts": [
        "type=bind,source=${localEnv:HOME}/.ssh/sockets,target=/ssh-sockets",
        // "source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind"
    ],
    "remoteEnv": {
        "SSH_AUTH_SOCK": "/ssh-sockets/agent.sock"
    }
}